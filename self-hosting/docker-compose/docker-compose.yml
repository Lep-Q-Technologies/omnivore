x-postgres:
  &postgres-common
  image: "ankane/pgvector:v0.5.1"
  user: postgres
  healthcheck:
    test: "exit 0"
    interval: 2s
    timeout: 12s
    retries: 3

services:
  postgres:
    <<: *postgres-common
    container_name: "omnivore-postgres"
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - omnivore-network

  migrate:
    image: "ghcr.io/omnivore-app/sh-migrate:latest"
    container_name: "omnivore-migrate"
    command: '/bin/sh ./packages/db/setup.sh'
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - omnivore-network

  api:
    image: "ghcr.io/omnivore-app/sh-backend:latest"
    container_name: "omnivore-api"
    expose:
      - 8080
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8080 || exit 1"]
      interval: 15s
      timeout: 90s
      retries: 6
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:  
      - omnivore-network

  queue-processor:
    image: "ghcr.io/omnivore-app/sh-queue-processor:latest"
    container_name: "omnivore-queue-processor"
    env_file:
      - .env
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - omnivore-network    

  web:
    image: "ghcr.io/omnivore-app/sh-web:latest"
    container_name: "omnivore-web"
    expose:
      - 8080
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - omnivore-network

  content-fetch:
    image: "ghcr.io/omnivore-app/sh-content-fetch:latest"
    container_name: "omnivore-content-fetch"
    expose:
      - 8080
    environment:
      - USE_FIREFOX=true
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - omnivore-network

  redis:
    image: "redis:7.2.4"
    container_name: "omnivore-redis"
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - omnivore-network
  nginx:
    image: nginx:alpine
    container_name: "omnivore-nginx"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - api
    networks:
      - omnivore-network

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: omnivore-cloudflared
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN} 
    restart: unless-stopped
    networks:
      - omnivore-network
    depends_on:
      - nginx
  webhook:
    image: almir/webhook
    container_name: omnivore-webhook
    volumes:
      - ~/projects/omnivore/scripts/hooks.json:/etc/webhook/hooks.json
    ports:
      - "9000:9000"
    networks:
      - omnivore-network

networks:
  omnivore-network:
    driver: bridge

volumes:
  pgdata:
  redis_data:
